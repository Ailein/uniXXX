#!/usr/bin/env node
const { init, callContract, ether, setVal } = require('./ThkContract.js');
const Web3 = require('web3');
const inquirer = require('inquirer');
const colors = require('colors');

let contractAddress;
let contractInstance;
let choiceList = [];
main = () => {
  inquirer.prompt([
    {
      type: 'input',
      name: 'contract',
      message: "输入合约名称",
    },{
      type: 'input',
      name: 'address',
      message: "输入合约地址",
      validate: function (value) {
        if (Web3.utils.isAddress(value)) {
          return true;
        }
        return '地址输入不正确';
      },
      default: function () {
        return '';
      }
    }
  ])
    .then(answers => {
      var { abi } = require('../build/contracts/'+answers.contract+'.json');
      contractAbi = abi;
      contractAddress = answers.address;
      open()
    });
}

open = () => {
  init().then(async () => {
    contractInstance = await callContract(contractAbi, contractAddress);
    choiceList = formatChoice(contractAbi);
    choice();
  })
}

formatChoice = (contractAbi) => {
  let _choiceList = [];
  for (let i = 0; i < contractAbi.length; i++) {
    if (contractAbi[i].type == 'function') {
      let params = '';
      if (typeof contractAbi[i].inputs != 'undefined') {
        if (contractAbi[i].inputs.length > 0) {
          for (let j = 0; j < contractAbi[i].inputs.length; j++) {
            if (j > 0) params = params + ', ';
            params = params + contractAbi[i].inputs[j].type + ' ' + contractAbi[i].inputs[j].name;
          }
        }
      }
      let name = contractAbi[i].name + '(' + params + ')';
      let obj = {
        name: name,
        value: _choiceList.length,
        function: contractAbi[i].name,
        type: contractAbi[i].stateMutability,
        inputs: typeof contractAbi[i].inputs == 'undefined' ? [] : contractAbi[i].inputs
      };
      _choiceList.push(obj);
    }
  }
  return _choiceList;
}

choice = () => {
  console.log("");
  inquirer.prompt([
    {
      type: 'list',
      name: 'function',
      message: "选择方法:",
      choices: choiceList
    }
  ])
    .then(answers => {
      answer(choiceList[answers.function])
    });
}

answer = (answers) => {
  console.log("");
  let params = '';
  if (answers.inputs.length > 0) {
    for (let j = 0; j < answers.inputs.length; j++) {
      if (j > 0) params = params + ', ';
      params = params + answers.inputs[j].type + ' ' + answers.inputs[j].name;
    }
  }

  call((answers.function + "(" + params + "):").yellow, answers.function, answers.inputs, answers.type);

}

call = (message, functionName, inputs, type) => {
  if (inputs.length > 0) {
    let questions = [];
    for (let i = 0; i < inputs.length; i++) {
      if (inputs[i].type == 'address') {
        questions.push(
          {
            type: 'input',
            name: inputs[i].name,
            message: inputs[i].type + " " + inputs[i].name + ':',
            validate: function (value) {
              if (Web3.utils.isAddress(value)) {
                return true;
              }
              return '地址输入不正确';
            }
          }
        )
      } else if (inputs[i].type == 'uint256') {
        questions.push(
          {
            type: 'input',
            name: inputs[i].name,
            message: inputs[i].type + " " + inputs[i].name + ':',
            validate: function (value) {
              var re = /^[0-9]*$/;
              if (re.test(value)) {
                return true;
              }
              return '数额输入不正确';
            }
          }
        );
      } else {
        questions.push(
          {
            type: 'input',
            name: inputs[i].name,
            message: inputs[i].type + " " + inputs[i].name + ':',
          }
        );
      }
    }
    if (type == 'payable') {
      questions.push({
        type: 'input',
        name: 'amount',
        message: '发送数额:',
        validate: function (value) {
          var re = /^[0-9]*$/;
          if (re.test(value)) {
            return true;
          }
          return '数额输入不正确';
        }
      });
    }
    inquirer.prompt(questions)
      .then(answers => {
        if (type == 'payable') {
          setVal(answers.amount);
        }else{
          setVal(0);
        }
        let params = [];
        for (let i = 0; i < inputs.length; i++) {
          params.push(answers[inputs[i].name].toLowerCase());
        }
        let result = contractInstance[functionName](...params);
        console.log(message, JSON.stringify(result).underline.green);
        if (type != 'payable') choice();
      });
  } else {
    let result = contractInstance[functionName]();
    console.log(message, JSON.stringify(result).underline.green);
    choice();
  }
}
main();